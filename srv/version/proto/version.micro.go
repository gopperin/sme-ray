// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/version/proto/version.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	srv/version/proto/version.proto

It has these top-level messages:
	VersionRequest
	VersionResponse
	CheckVersionRequest
	CheckVersionResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Version service

type VersionService interface {
	GetVersion(ctx context.Context, in *VersionRequest, opts ...client.CallOption) (*VersionResponse, error)
	CheckVersion(ctx context.Context, in *CheckVersionRequest, opts ...client.CallOption) (*CheckVersionResponse, error)
}

type versionService struct {
	c    client.Client
	name string
}

func NewVersionService(name string, c client.Client) VersionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &versionService{
		c:    c,
		name: name,
	}
}

func (c *versionService) GetVersion(ctx context.Context, in *VersionRequest, opts ...client.CallOption) (*VersionResponse, error) {
	req := c.c.NewRequest(c.name, "Version.GetVersion", in)
	out := new(VersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionService) CheckVersion(ctx context.Context, in *CheckVersionRequest, opts ...client.CallOption) (*CheckVersionResponse, error) {
	req := c.c.NewRequest(c.name, "Version.CheckVersion", in)
	out := new(CheckVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Version service

type VersionHandler interface {
	GetVersion(context.Context, *VersionRequest, *VersionResponse) error
	CheckVersion(context.Context, *CheckVersionRequest, *CheckVersionResponse) error
}

func RegisterVersionHandler(s server.Server, hdlr VersionHandler, opts ...server.HandlerOption) error {
	type version interface {
		GetVersion(ctx context.Context, in *VersionRequest, out *VersionResponse) error
		CheckVersion(ctx context.Context, in *CheckVersionRequest, out *CheckVersionResponse) error
	}
	type Version struct {
		version
	}
	h := &versionHandler{hdlr}
	return s.Handle(s.NewHandler(&Version{h}, opts...))
}

type versionHandler struct {
	VersionHandler
}

func (h *versionHandler) GetVersion(ctx context.Context, in *VersionRequest, out *VersionResponse) error {
	return h.VersionHandler.GetVersion(ctx, in, out)
}

func (h *versionHandler) CheckVersion(ctx context.Context, in *CheckVersionRequest, out *CheckVersionResponse) error {
	return h.VersionHandler.CheckVersion(ctx, in, out)
}
